diff --git a/operator/k8s_identity.go b/operator/k8s_identity.go
index 2dbc2da371..b8e3b5145f 100644
--- a/operator/k8s_identity.go
+++ b/operator/k8s_identity.go
@@ -13,6 +13,7 @@ import (
 	"github.com/cilium/cilium/operator/watchers"
 	"github.com/cilium/cilium/pkg/controller"
 	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
+	"github.com/cilium/cilium/pkg/k8s/identitybackend"
 	"github.com/cilium/cilium/pkg/k8s/informer"
 	"github.com/cilium/cilium/pkg/logging/logfields"
 
@@ -52,6 +53,20 @@ func deleteIdentity(ctx context.Context, identity *v2.CiliumIdentity) error {
 	return err
 }
 
+func updateIdentity(ctx context.Context, identity *v2.CiliumIdentity) error {
+	_, err := ciliumK8sClient.CiliumV2().CiliumIdentities().Update(
+		ctx,
+		identity,
+		metav1.UpdateOptions{})
+	if err != nil {
+		log.WithError(err).Error("Updating Identity")
+	} else {
+		log.WithField(logfields.Identity, identity.GetName()).Info("Updated identity")
+	}
+
+	return err
+}
+
 var identityHeartbeat *identity.IdentityHeartbeatStore
 
 // counters for GC failed/successful runs
@@ -96,9 +111,25 @@ func identityGCIteration(ctx context.Context) {
 			continue
 		}
 		if !identityHeartbeat.IsAlive(identity.Name) {
+			if identity.Annotations == nil {
+				identity.Annotations = make(map[string]string)
+			}
+			ts, ok := identity.Annotations[identitybackend.HeartBeatAnnotation]
+			if !ok {
+				log.WithField(logfields.Identity, identity).Info("Marking identity for later deletion")
+				identity.Annotations[identitybackend.HeartBeatAnnotation] = timeNow.Format(time.RFC3339Nano)
+				err := updateIdentity(ctx, identity)
+				if err != nil {
+					log.WithError(err).
+						WithField(logfields.Identity, identity).
+						Error("Marking identity for later deletion")
+				}
+				continue
+			}
+
 			log.WithFields(logrus.Fields{
 				logfields.Identity: identity,
-			}).Debug("Deleting unused identity")
+			}).Debugf("Deleting unused identity; marked for deletion at %s", ts)
 			if err := deleteIdentity(ctx, identity); err != nil {
 				log.WithError(err).WithFields(logrus.Fields{
 					logfields.Identity: identity,
diff --git a/pkg/allocator/cache.go b/pkg/allocator/cache.go
index 49984d3e04..537d96efd0 100644
--- a/pkg/allocator/cache.go
+++ b/pkg/allocator/cache.go
@@ -148,7 +148,10 @@ func (c *cache) OnDelete(id idpool.ID, key AllocatorKey) {
 		if value := a.localKeys.lookupID(id); value != nil {
 			ctx, cancel := context.WithTimeout(context.TODO(), backendOpTimeout)
 			defer cancel()
-			a.backend.UpdateKey(ctx, id, value, true)
+			err := a.backend.UpdateKey(ctx, id, value, true)
+			if err != nil {
+				log.WithError(err).Errorf("OnDelete MasterKeyProtection update for key %q", id)
+			}
 			return
 		}
 	}
diff --git a/pkg/k8s/identitybackend/identity.go b/pkg/k8s/identitybackend/identity.go
index b60ee3edb4..b9c2d740f7 100644
--- a/pkg/k8s/identitybackend/identity.go
+++ b/pkg/k8s/identitybackend/identity.go
@@ -34,6 +34,10 @@ var (
 )
 
 const (
+	// HeartBeatAnnotation is an annotation applied by the operator to indicate
+	// that a CiliumIdentity has been marked for deletion.
+	HeartBeatAnnotation = "io.cilium.heartbeat"
+
 	k8sPrefix               = labels.LabelSourceK8s + ":"
 	k8sNamespaceLabelPrefix = labels.LabelSourceK8s + ":" + k8sConst.PodNamespaceMetaLabels + labels.PathDelimiter
 )
@@ -106,8 +110,45 @@ func (c *crdBackend) AllocateIDIfLocked(ctx context.Context, id idpool.ID, key a
 func (c *crdBackend) AcquireReference(ctx context.Context, id idpool.ID, key allocator.AllocatorKey, lock kvstore.KVLocker) error {
 	// For CiliumIdentity-based allocation, the reference counting is
 	// handled via CiliumEndpoint. Any CiliumEndpoint referring to a
-	// CiliumIdentity will keep the CiliumIdentity alive. No action is
-	// needed to acquire the reference here.
+	// CiliumIdentity will keep the CiliumIdentity alive. However,
+	// there is a brief window where a CiliumEndpoint may not exist
+	// for a given CiliumIdentity (according to the operator), in
+	// which case the operator marks the CiliumIdentity for deletion.
+	// This checks to see if the CiliumIdentity has been marked for
+	// deletion and removes the mark so that the CiliumIdentity can
+	// be safely used.
+	//
+	// NOTE: A race against using a CiliumIdentity that might otherwise
+	// be (immediately) deleted is prevented by the operator logic that
+	// validates the ResourceVersion of the CiliumIdentity before deleting
+	// it. If a CiliumIdentity does (eventually) get deleted by the
+	// operator, the agent will then have a chance to recreate it.
+	var (
+		ts string
+		ok bool
+	)
+	// check to see if the cached copy of the identity
+	// has the annotation
+	ci, exists, err := c.getById(ctx, id)
+	if err != nil {
+		return err
+	}
+	if !exists {
+		return fmt.Errorf("identity (id:%q,key:%q) does not exist", id, key)
+	}
+
+	ts, ok = ci.Annotations[HeartBeatAnnotation]
+	if ok {
+		log.WithField(logfields.Identity, ci).Infof("Identity marked for deletion (at %s); attempting to unmark it", ts)
+		delete(ci.Annotations, HeartBeatAnnotation)
+		_, err = c.Client.CiliumV2().CiliumIdentities().Update(ctx, ci, metav1.UpdateOptions{})
+		if err != nil {
+			// put the annotation back, as it was not
+			// actually deleted.
+			ci.Annotations[HeartBeatAnnotation] = ts
+			return err
+		}
+	}
 	return nil
 }
 
@@ -145,9 +186,10 @@ func (c *crdBackend) UpdateKey(ctx context.Context, id idpool.ID, key allocator.
 		if err = c.AllocateID(ctx, id, key); err != nil {
 			return fmt.Errorf("Unable recreate missing CRD identity %q->%q: %s", key, id, err)
 		}
+		return nil
 	}
 
-	return nil
+	return err
 }
 
 func (c *crdBackend) UpdateKeyIfLocked(ctx context.Context, id idpool.ID, key allocator.AllocatorKey, reliablyMissing bool, lock kvstore.KVLocker) error {
