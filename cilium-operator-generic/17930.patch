From 761141ede9a2986c3cef2feb5dbd28a2e670ba40 Mon Sep 17 00:00:00 2001
From: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
Date: Thu, 18 Nov 2021 15:46:49 +0900
Subject: [PATCH 1/2] daemon: Support the wildcard option for
 directRoutingDevice

This implementation expands devices based on the concrete devices on the node,
sorts in increasing order and picks a first one,
when the wildcard option is specified.

Fixes: #17852

Signed-off-by: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
---
 .../gettingstarted/kubeproxy-free.rst         |  9 ++--
 daemon/cmd/devices.go                         | 52 ++++++++++++++-----
 daemon/cmd/devices_test.go                    | 17 ++++++
 3 files changed, 62 insertions(+), 16 deletions(-)

diff --git a/Documentation/gettingstarted/kubeproxy-free.rst b/Documentation/gettingstarted/kubeproxy-free.rst
index bbf75fc4b2b4..6652ecbd62dd 100644
--- a/Documentation/gettingstarted/kubeproxy-free.rst
+++ b/Documentation/gettingstarted/kubeproxy-free.rst
@@ -838,9 +838,12 @@ via ``devices`` then Cilium will use that device for direct routing.
 Otherwise, Cilium will use a device with Kubernetes InternalIP or ExternalIP
 being set. InternalIP is preferred over ExternalIP if both exist. To change
 the direct routing device, set the ``nodePort.directRoutingDevice`` Helm
-option, e.g. ``nodePort.directRoutingDevice=eth1``. If the direct
-routing device does not exist within ``devices``, Cilium will add the
-device to the latter list. The direct routing device is used for
+option, e.g. ``nodePort.directRoutingDevice=eth1``. The wildcard option can be
+used as well as the devices option, e.g. ``directRoutingDevice=eth+``.
+If more than one devices match the wildcard option, Cilium will sort them
+in increasing alphanumerical order and pick the first one. If the direct routing
+device does not exist within ``devices``, Cilium will add the device to the latter
+list. The direct routing device is used for
 :ref:`the NodePort XDP acceleration<XDP Acceleration>` as well (if enabled).
 
 In addition, thanks to the :ref:`host-services` feature, the NodePort service can
diff --git a/daemon/cmd/devices.go b/daemon/cmd/devices.go
index 1b322747d295..10d5a115b05e 100644
--- a/daemon/cmd/devices.go
+++ b/daemon/cmd/devices.go
@@ -63,6 +63,10 @@ func (dm *DeviceManager) Detect() error {
 		return err
 	}
 
+	if err := expandDirectRoutingDevice(); err != nil {
+		return err
+	}
+
 	l3DevOK := true
 	if !option.Config.EnableHostLegacyRouting {
 		// Probe whether fast redirect is supported for L3 devices. This will
@@ -283,37 +287,59 @@ func (dm *DeviceManager) updateDevicesFromRoutes(l3DevOK bool, routes []netlink.
 // expandDevices expands all wildcard device names to concrete devices.
 // e.g. device "eth+" expands to "eth0,eth1" etc. Non-matching wildcards are ignored.
 func expandDevices() error {
+	expandedDevices, err := expand(option.Config.Devices)
+	if err != nil {
+		return err
+	}
+	option.Config.Devices = expandedDevices
+	return nil
+}
+
+// expandDirectRoutingDevice expands all wildcard device names to concrete devices and picks a first one.
+func expandDirectRoutingDevice() error {
+	if option.Config.DirectRoutingDevice == "" {
+		return nil
+	}
+	expandedDevices, err := expand([]string{option.Config.DirectRoutingDevice})
+	if err != nil {
+		return err
+	}
+	option.Config.DirectRoutingDevice = expandedDevices[0]
+	return nil
+}
+
+func expand(devices []string) ([]string, error) {
 	allLinks, err := netlink.LinkList()
 	if err != nil {
-		return fmt.Errorf("Device wildcard expansion failed to fetch devices: %w", err)
+		return nil, fmt.Errorf("Device wildcard expansion failed to fetch devices: %w", err)
 	}
-	expandedDevices := make(map[string]struct{})
-	for _, iface := range option.Config.Devices {
+	expandedDevicesMap := make(map[string]struct{})
+	for _, iface := range devices {
 		if strings.HasSuffix(iface, "+") {
 			prefix := strings.TrimRight(iface, "+")
 			for _, link := range allLinks {
 				attrs := link.Attrs()
 				if strings.HasPrefix(attrs.Name, prefix) {
-					expandedDevices[attrs.Name] = struct{}{}
+					expandedDevicesMap[attrs.Name] = struct{}{}
 				}
 			}
 		} else {
-			expandedDevices[iface] = struct{}{}
+			expandedDevicesMap[iface] = struct{}{}
 		}
 	}
-	if len(option.Config.Devices) > 0 && len(expandedDevices) == 0 {
+	if len(devices) > 0 && len(expandedDevicesMap) == 0 {
 		// User defined devices, but expansion yielded no devices. Fail here to not
 		// surprise with auto-detection.
-		return fmt.Errorf("Device wildcard expansion failed to detect devices. Please verify --%s option.",
-			option.Devices)
+		return nil, fmt.Errorf("Device wildcard expansion failed to detect devices. Please verify --%s option.",
+			devices)
 	}
 
-	option.Config.Devices = make([]string, 0, len(expandedDevices))
-	for dev := range expandedDevices {
-		option.Config.Devices = append(option.Config.Devices, dev)
+	expandedDevices := make([]string, 0, len(expandedDevicesMap))
+	for dev := range expandedDevicesMap {
+		expandedDevices = append(expandedDevices, dev)
 	}
-	sort.Strings(option.Config.Devices)
-	return nil
+	sort.Strings(expandedDevices)
+	return expandedDevices, nil
 }
 
 func areDevicesRequired() bool {
diff --git a/daemon/cmd/devices_test.go b/daemon/cmd/devices_test.go
index 7688bb28e2dc..aa9ced5901fd 100644
--- a/daemon/cmd/devices_test.go
+++ b/daemon/cmd/devices_test.go
@@ -175,6 +175,23 @@ func (s *DevicesSuite) TestExpandDevices(c *C) {
 	})
 }
 
+func (s *DevicesSuite) TestExpandDirectRoutingDevice(c *C) {
+	s.withFreshNetNS(c, func() {
+		c.Assert(createDummy("dummy0", "192.168.0.1/24", false), IsNil)
+		c.Assert(createDummy("dummy1", "192.168.1.2/24", false), IsNil)
+		c.Assert(createDummy("unmatched", "192.168.4.5/24", false), IsNil)
+
+		// 1. Check expansion works and non-matching prefixes are ignored
+		option.Config.DirectRoutingDevice = "dummy+"
+		c.Assert(expandDirectRoutingDevice(), IsNil)
+		c.Assert(option.Config.DirectRoutingDevice, Equals, "dummy0")
+
+		// 2. Check that expansion fails if directRoutingDevice is specified but yields empty expansion
+		option.Config.DirectRoutingDevice = "none+"
+		c.Assert(expandDirectRoutingDevice(), NotNil)
+	})
+}
+
 func (s *DevicesSuite) withFreshNetNS(c *C, test func()) {
 	runtime.LockOSThread()
 	defer runtime.UnlockOSThread()

From 739afdc7ed766e2049edd5bdee54a8cf1aac8eac Mon Sep 17 00:00:00 2001
From: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
Date: Wed, 24 Nov 2021 17:49:28 +0900
Subject: [PATCH 2/2] daemon: Fix expandDeviceWildcards function name and print
 an option name

Modify the function name appropriately, and print an option name
if something wrong with the wildcard expansion.

Signed-off-by: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
---
 daemon/cmd/devices.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/daemon/cmd/devices.go b/daemon/cmd/devices.go
index 10d5a115b05e..0ccfa9cf2961 100644
--- a/daemon/cmd/devices.go
+++ b/daemon/cmd/devices.go
@@ -287,7 +287,7 @@ func (dm *DeviceManager) updateDevicesFromRoutes(l3DevOK bool, routes []netlink.
 // expandDevices expands all wildcard device names to concrete devices.
 // e.g. device "eth+" expands to "eth0,eth1" etc. Non-matching wildcards are ignored.
 func expandDevices() error {
-	expandedDevices, err := expand(option.Config.Devices)
+	expandedDevices, err := expandDeviceWildcards(option.Config.Devices, option.Devices)
 	if err != nil {
 		return err
 	}
@@ -300,7 +300,7 @@ func expandDirectRoutingDevice() error {
 	if option.Config.DirectRoutingDevice == "" {
 		return nil
 	}
-	expandedDevices, err := expand([]string{option.Config.DirectRoutingDevice})
+	expandedDevices, err := expandDeviceWildcards([]string{option.Config.DirectRoutingDevice}, option.DirectRoutingDevice)
 	if err != nil {
 		return err
 	}
@@ -308,7 +308,7 @@ func expandDirectRoutingDevice() error {
 	return nil
 }
 
-func expand(devices []string) ([]string, error) {
+func expandDeviceWildcards(devices []string, option string) ([]string, error) {
 	allLinks, err := netlink.LinkList()
 	if err != nil {
 		return nil, fmt.Errorf("Device wildcard expansion failed to fetch devices: %w", err)
@@ -331,7 +331,7 @@ func expand(devices []string) ([]string, error) {
 		// User defined devices, but expansion yielded no devices. Fail here to not
 		// surprise with auto-detection.
 		return nil, fmt.Errorf("Device wildcard expansion failed to detect devices. Please verify --%s option.",
-			devices)
+			option)
 	}
 
 	expandedDevices := make([]string, 0, len(expandedDevicesMap))
