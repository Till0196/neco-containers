From ee0e2f1a440794e271c666ad288d54f064d17369 Mon Sep 17 00:00:00 2001
From: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
Date: Mon, 13 Jun 2022 11:38:08 +0900
Subject: [PATCH] bgp: Check the Condition.Ready field when adding ready
 endpoints

This PR fixes the issue that MetalLB doesn't withdraw the route advertisements
to the node where any healthy local endpoint exists for the service with
externalTrafficPolicy is Local when the backend pod is terminating.
Cilium takes endpoint.Conditions.Ready field into account when it determines
whether to announce the route.

Fixes: #19810

Signed-off-by: Yusuke Suzuki <yusuke-suzuki@cybozu.co.jp>
---
 pkg/bgp/speaker/speaker.go | 38 ++++++++++++++++++++++++++++----------
 1 file changed, 28 insertions(+), 10 deletions(-)

diff --git a/pkg/bgp/speaker/speaker.go b/pkg/bgp/speaker/speaker.go
index 6a2d9e5472f..84e9986bc0a 100644
--- a/pkg/bgp/speaker/speaker.go
+++ b/pkg/bgp/speaker/speaker.go
@@ -423,11 +423,13 @@ func convertEndpointSliceV1(in *slim_discover_v1.EndpointSlice) *metallbspr.Endp
 	}
 	out := new(metallbspr.Endpoints)
 	for _, ep := range in.Endpoints {
-		for _, addr := range ep.Addresses {
-			out.Ready = append(out.Ready, metallbspr.Endpoint{
-				IP:       addr,
-				NodeName: ep.NodeName,
-			})
+		if isConditionReadyForSliceV1(ep.Conditions) {
+			for _, addr := range ep.Addresses {
+				out.Ready = append(out.Ready, metallbspr.Endpoint{
+					IP:       addr,
+					NodeName: ep.NodeName,
+				})
+			}
 		}
 		// See above comment in convertEndpoints() for why we only append
 		// "ready" endpoints.
@@ -435,17 +437,26 @@ func convertEndpointSliceV1(in *slim_discover_v1.EndpointSlice) *metallbspr.Endp
 	return out
 }
 
+func isConditionReadyForSliceV1(conditions slim_discover_v1.EndpointConditions) bool {
+	if conditions.Ready == nil {
+		return true
+	}
+	return *conditions.Ready
+}
+
 func convertEndpointSliceV1Beta1(in *slim_discover_v1beta1.EndpointSlice) *metallbspr.Endpoints {
 	if in == nil {
 		return nil
 	}
 	out := new(metallbspr.Endpoints)
 	for _, ep := range in.Endpoints {
-		for _, addr := range ep.Addresses {
-			out.Ready = append(out.Ready, metallbspr.Endpoint{
-				IP:       addr,
-				NodeName: ep.NodeName,
-			})
+		if isConditionReadyForSliceV1Beta1(ep.Conditions) {
+			for _, addr := range ep.Addresses {
+				out.Ready = append(out.Ready, metallbspr.Endpoint{
+					IP:       addr,
+					NodeName: ep.NodeName,
+				})
+			}
 		}
 		// See above comment in convertEndpoints() for why we only append
 		// "ready" endpoints.
@@ -453,6 +464,13 @@ func convertEndpointSliceV1Beta1(in *slim_discover_v1beta1.EndpointSlice) *metal
 	return out
 }
 
+func isConditionReadyForSliceV1Beta1(conditions slim_discover_v1beta1.EndpointConditions) bool {
+	if conditions.Ready == nil {
+		return true
+	}
+	return *conditions.Ready
+}
+
 // nodeLabels copies the provided labels and returns
 // a pointer to the copy.
 func nodeLabels(l map[string]string) *map[string]string {
