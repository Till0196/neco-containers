diff --git a/controllers/dashboard_controller.go b/controllers/dashboard_controller.go
index 0da03cba..198c9be0 100644
--- a/controllers/dashboard_controller.go
+++ b/controllers/dashboard_controller.go
@@ -422,6 +422,11 @@ func (r *GrafanaDashboardReconciler) onDashboardCreated(ctx context.Context, gra
 	}
 
 	if exists && content.Unchanged(cr, hash) && !cr.ResyncPeriodHasElapsed() {
+		if found, _ := grafana.Status.Dashboards.Find(cr.Namespace, cr.Name); !found {
+			log.Info("fixing inconsistent .status.dashboards filed", "grafana", map[string]string{"name": grafana.Name, "namespace": grafana.Namespace})
+			grafana.Status.Dashboards = grafana.Status.Dashboards.Add(cr.Namespace, cr.Name, uid)
+			return r.Client.Status().Update(ctx, grafana)
+		}
 		return nil
 	}
 
@@ -433,6 +438,11 @@ func (r *GrafanaDashboardReconciler) onDashboardCreated(ctx context.Context, gra
 	}
 
 	if !remoteChanged {
+		if found, _ := grafana.Status.Dashboards.Find(cr.Namespace, cr.Name); !found {
+			log.Info("fixing inconsistent .status.dashboards filed", "grafana", map[string]string{"name": grafana.Name, "namespace": grafana.Namespace})
+			grafana.Status.Dashboards = grafana.Status.Dashboards.Add(cr.Namespace, cr.Name, uid)
+			return r.Client.Status().Update(ctx, grafana)
+		}
 		return nil
 	}
 
diff --git a/controllers/datasource_controller.go b/controllers/datasource_controller.go
index d527334a..d271c217 100644
--- a/controllers/datasource_controller.go
+++ b/controllers/datasource_controller.go
@@ -366,6 +366,8 @@ func (r *GrafanaDatasourceReconciler) finalize(ctx context.Context, cr *v1beta1.
 }
 
 func (r *GrafanaDatasourceReconciler) onDatasourceCreated(ctx context.Context, grafana *v1beta1.Grafana, cr *v1beta1.GrafanaDatasource, datasource *models.UpdateDataSourceCommand, hash string) error {
+	log := logf.FromContext(ctx)
+
 	if grafana.IsExternal() && cr.Spec.Plugins != nil {
 		return fmt.Errorf("external grafana instances don't support plugins, please remove spec.plugins from your datasource cr")
 	}
@@ -385,6 +387,11 @@ func (r *GrafanaDatasourceReconciler) onDatasourceCreated(ctx context.Context, g
 	}
 
 	if exists && cr.Unchanged(hash) && !cr.ResyncPeriodHasElapsed() {
+		if found, _ := grafana.Status.Datasources.Find(cr.Namespace, cr.Name); !found {
+			log.Info("fixing inconsistent .status.datasources filed", "grafana", map[string]string{"name": grafana.Name, "namespace": grafana.Namespace})
+			grafana.Status.Datasources = grafana.Status.Datasources.Add(cr.Namespace, cr.Name, datasource.UID)
+			return r.Client.Status().Update(ctx, grafana)
+		}
 		return nil
 	}
 
