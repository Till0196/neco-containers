From c763c7cbf99acd0d769920f09986dba6b7aed698 Mon Sep 17 00:00:00 2001
From: Ted Yu <yuzhihong@gmail.com>
Date: Sat, 21 Mar 2020 07:03:20 -0700
Subject: [PATCH] Enable reconciliation in manager#syncPod

Signed-off-by: Ted Yu <yuzhihong@gmail.com>
---
 pkg/kubelet/status/status_manager.go      | 19 +++++++++++--------
 pkg/kubelet/status/status_manager_test.go |  2 +-
 2 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/pkg/kubelet/status/status_manager.go b/pkg/kubelet/status/status_manager.go
index 9ca4a49ebcf35..008e8f6cc4b4c 100644
--- a/pkg/kubelet/status/status_manager.go
+++ b/pkg/kubelet/status/status_manager.go
@@ -55,6 +55,10 @@ type versionedPodStatus struct {
 type podStatusSyncRequest struct {
 	podUID types.UID
 	status versionedPodStatus
+	// true indicates needsUpdate() should be called in manager#syncPod().
+	// false when needsReconcile() determines that reconciliation is to be done,
+	//  therefore we don't need to call needsUpdate()
+	checkNeedsUpdate bool
 }
 
 // Updates pod statuses in apiserver. Writes only when new status has changed.
@@ -165,7 +169,7 @@ func (m *manager) Start() {
 			case syncRequest := <-m.podStatusChannel:
 				klog.V(5).Infof("Status Manager: syncing pod: %q, with status: (%d, %v) from podStatusChannel",
 					syncRequest.podUID, syncRequest.status.version, syncRequest.status.status)
-				m.syncPod(syncRequest.podUID, syncRequest.status)
+				m.syncPod(syncRequest.podUID, syncRequest.status, true)
 			case <-syncTicker:
 				klog.V(5).Infof("Status Manager: syncing batch")
 				// remove any entries in the status channel since the batch will handle them
@@ -445,7 +449,7 @@ func (m *manager) updateStatusInternal(pod *v1.Pod, status v1.PodStatus, forceUp
 	m.podStatuses[pod.UID] = newStatus
 
 	select {
-	case m.podStatusChannel <- podStatusSyncRequest{pod.UID, newStatus}:
+	case m.podStatusChannel <- podStatusSyncRequest{pod.UID, newStatus, true}:
 		klog.V(5).Infof("Status Manager: adding pod: %q, with status: (%d, %v) to podStatusChannel",
 			pod.UID, newStatus.version, newStatus.status)
 		return true
@@ -519,31 +523,30 @@ func (m *manager) syncBatch() {
 				syncedUID = mirrorUID
 			}
 			if m.needsUpdate(types.UID(syncedUID), status) {
-				updatedStatuses = append(updatedStatuses, podStatusSyncRequest{uid, status})
+				updatedStatuses = append(updatedStatuses, podStatusSyncRequest{uid, status, true})
 			} else if m.needsReconcile(uid, status.status) {
 				// Delete the apiStatusVersions here to force an update on the pod status
 				// In most cases the deleted apiStatusVersions here should be filled
 				// soon after the following syncPod() [If the syncPod() sync an update
 				// successfully].
 				delete(m.apiStatusVersions, syncedUID)
-				updatedStatuses = append(updatedStatuses, podStatusSyncRequest{uid, status})
+				updatedStatuses = append(updatedStatuses, podStatusSyncRequest{uid, status, false})
 			}
 		}
 	}()
 
 	for _, update := range updatedStatuses {
 		klog.V(5).Infof("Status Manager: syncPod in syncbatch. pod UID: %q", update.podUID)
-		m.syncPod(update.podUID, update.status)
+		m.syncPod(update.podUID, update.status, update.checkNeedsUpdate)
 	}
 }
 
 // syncPod syncs the given status with the API server. The caller must not hold the lock.
-func (m *manager) syncPod(uid types.UID, status versionedPodStatus) {
-	if !m.needsUpdate(uid, status) {
+func (m *manager) syncPod(uid types.UID, status versionedPodStatus, checkNeedsUpdate bool) {
+	if checkNeedsUpdate && !m.needsUpdate(uid, status) {
 		klog.V(1).Infof("Status for pod %q is up-to-date; skipping", uid)
 		return
 	}
-
 	// TODO: make me easier to express from client code
 	pod, err := m.kubeClient.CoreV1().Pods(status.podNamespace).Get(context.TODO(), status.podName, metav1.GetOptions{})
 	if errors.IsNotFound(err) {
diff --git a/pkg/kubelet/status/status_manager_test.go b/pkg/kubelet/status/status_manager_test.go
index eb3684ca87b2a..3392beb19a24c 100644
--- a/pkg/kubelet/status/status_manager_test.go
+++ b/pkg/kubelet/status/status_manager_test.go
@@ -127,7 +127,7 @@ func (m *manager) consumeUpdates() int {
 	for {
 		select {
 		case syncRequest := <-m.podStatusChannel:
-			m.syncPod(syncRequest.podUID, syncRequest.status)
+			m.syncPod(syncRequest.podUID, syncRequest.status, true)
 			updates++
 		default:
 			return updates
