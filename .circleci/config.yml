version: 2.1
jobs:
  build:
    # This is a parameterized job
    # https://circleci.com/docs/2.0/reusing-config/#authoring-parameterized-jobs
    parameters:
      container-image:
        type: string
      dir:
        type: string
        default: ""
      attach:
        type: boolean
        default: false
    description: "build << parameters.container-image >>"
    working_directory: /app
    docker:
      - image: docker:stable
    steps:
      - run:
          name: Install tools
          command: |
            apk add --no-cache curl jq git
      - checkout
      - when:
          condition: << parameters.attach >>
          steps:
            - attach_workspace:
                at: /app/<< parameters.dir >>/workspace
      # Use docker 19.03.13 to fix the grafana build failure caused by statx system call not being allowed with default docker version 17.09.0
      # See https://github.com/docker/for-linux/issues/208 https://github.com/moby/moby/pull/36417
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Check TAG files
          command: |
            c="$(./tag_exists << parameters.container-image >> << parameters.dir >>)"
            if [ "$c" = ng ]; then
                echo << parameters.container-image >> > BUILDS
            fi
      - run:
          name: Validate consistency between BRANCH and TAG
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
            ./tag_branch_consistency $dir
      - run:
          name: Lint Dockerfile
          command: |
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker run --rm -i hadolint/hadolint /bin/hadolint - --ignore DL3008 --ignore DL3016 < $dir/Dockerfile
      - run:
          name: Build images
          no_output_timeout: 20m
          command: |
            if [ ! -f BUILDS ]; then
                echo "no need to build << parameters.container-image >>."
                exit 0
            fi
            echo "building << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            docker build -t quay.io/cybozu/<< parameters.container-image >>:latest $dir
      - deploy:
          name: Push Docker image to Quay.io
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
                exit 0
            fi
            if [ ! -f BUILDS ]; then
                exit 0
            fi
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo
            echo "pushing << parameters.container-image >> ..."
            dir=<< parameters.dir >>
            if [ "$dir" = "" ]; then dir=<< parameters.container-image >> ; fi
            TAG=$(cat $dir/TAG)
            docker tag quay.io/cybozu/<< parameters.container-image >>:latest quay.io/cybozu/<< parameters.container-image >>:$TAG
            docker push quay.io/cybozu/<< parameters.container-image >>:$TAG
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            if [ -f $dir/BRANCH ]; then
                BRANCH=$(cat $dir/BRANCH)
                docker tag quay.io/cybozu/<< parameters.container-image >>:$TAG quay.io/cybozu/<< parameters.container-image >>:$BRANCH
                docker push quay.io/cybozu/<< parameters.container-image >>:$BRANCH
            fi
  build-ceph:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:18.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists ceph)"
            if [ "$c" = ng ]; then
                echo ceph > BUILDS
            fi
      - run:
          name: Checkout Ceph source
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then exit 0; fi
            cd src
            git clone https://github.com/ceph/ceph.git
            cd ceph
            git checkout v<< parameters.version >>
            git submodule update --init --recursive
      - run:
          name: Install dependencies
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            cd src/ceph
            ./install-deps.sh
      - run:
          name: Build Ceph packages
          command: |
            if [ ! -f BUILDS ]; then
              # fake for the next step
              cd src/workspace
              touch COPYING
              exit 0
            fi
            cd src/ceph
            sed -i -e 's/WITH_CEPHFS_JAVA=ON/WITH_CEPHFS_JAVA=OFF/' debian/rules
            sed -i -e 's/usr\/share\/java\/libcephfs-test.jar//' debian/ceph-test.install
            rm debian/libcephfs-java.jlibs debian/libcephfs-jni.install debian/ceph-mgr-dashboard*
            dpkg-buildpackage --build=binary -uc -us -j20
            rm ../*-dbg_*.deb ../*-dev_*.deb
            mv ../*.deb ../workspace/
            mv COPYING* ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  test-go-sources:
    parameters:
      directory:
        type: string
      targets:
        type: string
        default: test
    description: "test Go sources at << parameters.directory >>"
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
      - image: quay.io/coreos/etcd:v3.3
    working_directory: /work
    steps:
      - checkout
      - run:
          command: |
            cd << parameters.directory >>
            make << parameters.targets >> SUDO=
  test-cke-tools-scripts:
    docker:
      - image: quay.io/cybozu/ubuntu-dev:18.04
    steps:
      - checkout
      - run: apt-get update
      - run: cd cke-tools/src/scripts; make setup SUDO=
      - run: cd cke-tools/src/scripts; make
  test-local-pv-provisioner:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - checkout
      - run: cd local-pv-provisioner; make setup SUDO=
      - run: cd local-pv-provisioner; make check-uncommitted
      - run: cd local-pv-provisioner; make test SUDO=
  build-envoy:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:18.04
    resource_class: 2xlarge+
    steps:
      - run:
          name: Install git command
          command: |
            apt-get update
            apt-get -y install git
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists envoy)"
            if [ "$c" = ng ]; then
                echo envoy > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install build-essential \
              libtool \
              cmake \
              automake \
              autoconf \
              make \
              ninja-build \
              curl \
              unzip \
              virtualenv \
              python3-pip \
              zlib1g-dev
            ln -s `which python3` /usr/local/bin/python
      - run:
          name: Install build tools
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -O -SL https://raw.githubusercontent.com/envoyproxy/envoy-build-tools/master/build_container/build_container_common.sh
            curl -O -SL https://raw.githubusercontent.com/envoyproxy/envoy-build-tools/master/build_container/build_container_ubuntu.sh
            chmod +x build_container_ubuntu.sh
            ./build_container_ubuntu.sh
      - run:
          name: Install Bazel
          environment:
            BAZEL_VERSION: 3.4.1
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -o /tmp/bazel.deb -fsSL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build envoy
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch envoy LICENSE docker-entrypoint.sh
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/envoyproxy/envoy
            cd envoy
            bazel/setup_clang.sh /opt/llvm
            echo "build --config=clang" >> user.bazelrc
            bazel build --jobs 20 --cxxopt=-DMEMORY_TEST_EXACT=1 -c opt //source/exe:envoy-static
            strip --strip-debug bazel-bin/source/exe/envoy-static
            mv bazel-bin/source/exe/envoy-static ../workspace/envoy
            mv LICENSE ../workspace
            mv ci/docker-entrypoint.sh ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-cert-manager:
    parameters:
      version:
        type: string
    docker:
      - image: quay.io/cybozu/golang:1.15-bionic
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists cert-manager)"
            if [ "$c" = ng ]; then
                echo cert-manager > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install unzip pkg-config zlib1g-dev python
      - run:
          name: Install Bazel
          environment:
            BAZEL_VERSION: 2.2.0
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            curl -o /tmp/bazel.deb -fsSL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb
            dpkg -i /tmp/bazel.deb
            rm -f /tmp/bazel.deb
      - run:
          name: Build cert-manager
          command: |
            mkdir -p src/workspace
            if [ ! -f BUILDS ]; then
                # fake for the next step
                cd src/workspace
                touch cainjector controller webhook LICENSE
                exit 0
            fi
            cd src
            git clone --depth 1 --branch v<< parameters.version >> https://github.com/jetstack/cert-manager
            cd cert-manager
            make cainjector controller webhook
            mv bazel-out/k8-fastbuild-ST-*/bin/cmd/cainjector/cainjector_/cainjector ../workspace
            mv bazel-out/k8-fastbuild-ST-*/bin/cmd/controller/controller_/controller ../workspace
            mv bazel-out/k8-fastbuild-ST-*/bin/cmd/webhook/webhook_/webhook ../workspace
            mv LICENSE ../workspace
      - persist_to_workspace:
          root: src/workspace
          paths:
            - "*"
  build-admission:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - checkout
      - run: cd admission; make setup SUDO=
      - run: cd admission; make test
      - run: cd admission; make build
      - persist_to_workspace:
          root: admission/bin
          paths:
            - neco-admission
  build-moco-mysql:
    parameters:
      mysql-version:
        type: string
    docker:
      - image: quay.io/cybozu/ubuntu-dev:18.04
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Check TAG file
          command: |
            c="$(./tag_exists moco-mysql)"
            if [ "$c" = ng ]; then
                echo moco-mysql > BUILDS
            fi
      - run:
          name: Install dependency packages
          command: |
            if [ ! -f BUILDS ]; then exit 0; fi
            apt-get update
            apt-get -y install cmake libncurses5-dev libjemalloc-dev libnuma-dev pkg-config
      - run:
          name: Build MySQL
          command: |
            if [ ! -f BUILDS ]; then
                # fake for the next step
                mkdir -p /usr/local/mysql
                cd /usr/local/mysql
                touch LICENSE
                mkdir bin lib share
                exit 0
            fi
            mkdir src
            cd src
            curl -fsSL -O https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-<< parameters.mysql-version >>.tar.gz
            tar -x -z -f mysql-boost-<< parameters.mysql-version >>.tar.gz
            cd mysql-<< parameters.mysql-version >>
            mkdir bld
            cd bld
            cmake .. -DBUILD_CONFIG=mysql_release -DCMAKE_BUILD_TYPE=Release -DWITH_BOOST=$(ls -d ../boost/boost_*) -DWITH_NUMA=1 -DWITH_JEMALLOC=1
            make -j 20
            make install
      - persist_to_workspace:
          root: /usr/local/mysql
          paths:
            - LICENSE
            - bin
            - lib
            - share

workflows:
  main:
    jobs:
      - test-cke-tools-scripts
      - test-go-sources:
          name: test-go-sources-bmc-reverse-proxy
          directory: bmc-reverse-proxy
      - test-go-sources:
          name: test-go-sources-cke-tools
          directory: cke-tools/src
          targets: check-generate test
      - test-local-pv-provisioner
      - test-go-sources:
          name: test-go-sources-machines-endpoints
          directory: machines-endpoints
      - test-go-sources:
          name: test-go-sources-analyzer
          directory: golang/analyzer
      - test-go-sources:
          name: test-go-sources-testhttpd
          directory: testhttpd/src
      - test-go-sources:
          name: test-go-sources-envoy
          directory: envoy
      - build-admission
      - build:
          name: build-admission-image
          container-image: neco-admission
          dir: admission
          attach: true
          requires:
            - build-admission
      - build:
          name: build-argocd
          container-image: argocd
      - build:
          name: build-bird
          container-image: bird
      - build:
          name: build-bmc-reverse-proxy
          container-image: bmc-reverse-proxy
      - build:
          name: build-calico
          container-image: calico
      - build-ceph:
          version: 15.2.4
      - build:
          name: build-ceph-container
          container-image: ceph
          attach: true
          dir: ceph
          requires:
            - build-ceph
      - build-cert-manager:
          version: 1.0.4
      - build:
          name: build-cert-manager-container
          container-image: cert-manager
          attach: true
          dir: cert-manager
          requires:
            - build-cert-manager
      - build:
          name: build-chrony
          container-image: chrony
      - build:
          name: build-cke-tools
          container-image: cke-tools
      - build:
          name: build-contour
          container-image: contour
      - build:
          name: build-coredns
          container-image: coredns
      - build:
          name: build-dex
          container-image: dex
      - build:
          name: build-dnsmasq
          container-image: dnsmasq
      - build-envoy:
          version: 1.16.1
      - build:
          name: build-envoy-container
          container-image: envoy
          attach: true
          dir: envoy
          requires:
            - build-envoy
      - build:
          name: build-etcd
          container-image: etcd
      - build:
          name: build-external-dns
          container-image: external-dns
      - build:
          name: build-filebeat
          container-image: filebeat
      - build:
          name: build-golang
          container-image: golang
      - build:
          name: build-golang-bionic
          container-image: golang
          dir: golang-bionic
      - build:
          name: build-gorush
          container-image: gorush
      - build:
          name: build-grafana
          container-image: grafana
      - build:
          name: build-grafana-operator
          container-image: grafana-operator
      - build:
          name: build-kube-state-metrics
          container-image: kube-state-metrics
      - build:
          name: build-kubernetes
          container-image: kubernetes
      - build:
          name: build-local-pv-provisioner
          container-image: local-pv-provisioner
          requires:
            - test-local-pv-provisioner
      - build:
          name: build-machines-endpoints
          container-image: machines-endpoints
      - build:
          name: build-mackerel-agent
          container-image: mackerel-agent
      - build:
          name: build-metallb
          container-image: metallb
      - build:
          name: build-metrics-server
          container-image: metrics-server
      - build-moco-mysql:
          mysql-version: 8.0.20
      - build:
          name: build-moco-mysql-container
          container-image: moco-mysql
          attach: true
          dir: moco-mysql
          requires:
            - build-moco-mysql
      - build:
          name: build-pause
          container-image: pause
      - build:
          name: build-prometheus
          container-image: prometheus
      - build:
          name: build-redis
          container-image: redis
      - build:
          name: build-rook
          container-image: rook
      - build:
          name: build-serf
          container-image: serf
      - build:
          name: build-squid
          container-image: squid
      - build:
          name: build-tail
          container-image: tail
      - build:
          name: build-teleport
          container-image: teleport
      - build:
          name: build-testhttpd
          container-image: testhttpd
      - build:
          name: build-unbound
          container-image: unbound
      - build:
          name: build-vault
          container-image: vault
