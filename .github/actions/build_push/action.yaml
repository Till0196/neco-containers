name: "Build and push"
description: "build and push container image"

inputs:
  dir:
    description: "working direcotry"
    required: false
    default: ""
  container-image:
    description: "container image"
    required: true
  github_token:
    description: "GitHub Token"
    required: true
  yamory_token:
    description: "Yamory Access Token"
    required: true
  enable_arm64:
    description: "Add arm64 to container image platform"
    required: false
    type: boolean
    default: false
  make_test:
    description: "Run make test before building docker image"
    required: false
    type: boolean
    default: false
  scan:
    description: "Enable image scanning"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Extract targets
      shell: bash
      run: |
        dir=${{ inputs.dir }}
        if [ "$dir" = "" ]; then dir=${{ inputs.container-image }} ; fi
        image=${{ inputs.container-image }}
        TAG=$(cat ${dir}/TAG)
        c=$(container-tag-exists ghcr.io/cybozu/$image $TAG)
        # The stdout should be either "" or "found".
        if [ "$c" = "" ]; then
            echo "BUILDS_TAG=ghcr.io/cybozu/$image:$TAG" >> $GITHUB_ENV

            if [ -f $dir/BRANCH ]; then
              if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
              else
                BRANCH=$(cat $dir/BRANCH)
                echo "BUILDS_BRANCH=ghcr.io/cybozu/$image:$BRANCH" >> $GITHUB_ENV
              fi
            fi
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
    - name: Validate consistency between BRANCH and TAG
      shell: bash
      run: |
        dir=${{ inputs.dir }}
        if [ "$dir" = "" ]; then dir=${{ inputs.container-image }} ; fi
        if [ -e "$dir/NO_TAG_BRANCH_CONSISTENCY" ]; then exit 0; fi
        ./tag_branch_consistency $dir
    - name: Set container build platform
      shell: bash
      run: |
        enable_arm64=${{ inputs.enable_arm64 }}
        if [ "$enable_arm64" = "true" ]; then
          echo "PLATFORM=linux/amd64,linux/arm64" >> $GITHUB_ENV
        else
          echo "PLATFORM=linux/amd64" >> $GITHUB_ENV
        fi
    - name: Make test
      if: inputs.make_test && env.BUILDS_TAG != null
      shell: bash
      run: |
        make -C ${{ inputs.dir }} test
    - name: Build and push
      if: env.BUILDS_TAG != null
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.dir }}
        platforms: ${{ env.PLATFORM }}
        provenance: false
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.BUILDS_TAG }}
          ${{ env.BUILDS_BRANCH }}
    - name: Install Trivy
      if: inputs.scan == 'true' && env.BUILDS_TAG != null && github.event_name != 'pull_request'
      shell: bash
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - name: Scan images
      if: inputs.scan == 'true' && env.BUILDS_TAG != null && github.event_name != 'pull_request'
      shell: bash
      env:
        YAMORY_ACCESS_TOKEN: ${{ inputs.yamory_token }}
      run: |
        echo
        echo "scanning $BUILDS_TAG ..."
        if [[ $BUILDS_TAG == "ghcr.io/cybozu/golang:"* ]]; then
          dir=${{ inputs.dir }}
          BRANCH=$(cat $dir/BRANCH)
          image=${{ inputs.container-image }}:$BRANCH
        else
          image=${{ inputs.container-image }}
        fi
        YAMORY_IMAGE_IDENTIFIER="ghcr.io/cybozu/$image" YAMORY_IMAGE_NAME="$BUILDS_TAG" bash -c "$(curl -sSf -L https://mw-receiver.yamory.io/image/script/trivy)"
