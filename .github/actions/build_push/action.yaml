name: "Build and push"
description: "build and push container image"

inputs:
  dir:
    description: "working direcotry"
    required: false
    default: ""
  container-image:
    description: "container image"
    required: true
  github_token:
    description: "GitHub Token"
    required: true
  yamory_token:
    description: "Yamory Access Token"
    required: true
  enable_arm64:
    description: "Add arm64 to container image platform"
    required: false
    default: "false"
  make_test:
    description: "Run make test before building docker image"
    required: false
    default: "false"
  scan:
    description: "Enable image scanning"
    required: false
    default: "false"
  target:
    description: "Target stage to build"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - id: extract
      name: Extract targets
      uses: ./.github/actions/extract_tags
      with:
        dir: ${{ inputs.dir }}
        container-image: ${{ inputs.container-image }}
        github_token: ${{ inputs.github_token }}
    - name: Set container build platform
      if: ${{ steps.extract.outputs.build }}
      shell: bash
      run: |
        enable_arm64=${{ inputs.enable_arm64 }}
        if [ "$enable_arm64" = "true" ]; then
          echo "PLATFORM=linux/amd64,linux/arm64" >> $GITHUB_ENV
        else
          echo "PLATFORM=linux/amd64" >> $GITHUB_ENV
        fi
    - name: Make test
      if: ${{ inputs.make_test == 'true' && steps.extract.outputs.build }}
      shell: bash
      run: |
        make -C ${{ inputs.dir }} test
    - name: Build and push
      if: ${{ steps.extract.outputs.build }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.dir }}
        platforms: ${{ env.PLATFORM }}
        provenance: false
        push: ${{ steps.extract.outputs.docker_push }}
        tags: |
          ${{ steps.extract.outputs.tag }}
          ${{ steps.extract.outputs.branch }}
        target: ${{ inputs.target }}
    - name: Install Trivy
      if: ${{ inputs.scan == 'true' && steps.extract.outputs.push }}
      shell: bash
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - name: Scan images
      if: ${{ inputs.scan == 'true' && steps.extract.outputs.push }}
      shell: bash
      env:
        YAMORY_ACCESS_TOKEN: ${{ inputs.yamory_token }}
      run: |
        echo
        echo "scanning ${{ steps.extract.outputs.tag }} ..."
        if [[ "${{ steps.extract.outputs.tag }}" == "ghcr.io/cybozu/golang:"* ]]; then
          dir=${{ inputs.dir }}
          BRANCH=$(cat $dir/BRANCH)
          image=${{ inputs.container-image }}:$BRANCH
        else
          image=${{ inputs.container-image }}
        fi
        YAMORY_IMAGE_IDENTIFIER="ghcr.io/cybozu/$image" YAMORY_IMAGE_NAME="${{ steps.extract.outputs.tag }}" bash -c "$(curl -sSf -L https://mw-receiver.yamory.io/image/script/trivy)"
