diff --git a/bpf/bpf_lxc.c b/bpf/bpf_lxc.c
index 7fb178840e..53d9bead1f 100644
--- a/bpf/bpf_lxc.c
+++ b/bpf/bpf_lxc.c
@@ -1068,6 +1068,7 @@ ipv6_policy(struct __ctx_buff *ctx, int ifindex, __u32 src_label, __u8 *reason,
 	__u32 monitor = 0;
 	__u8 policy_match_type = POLICY_MATCH_NONE;
 	__u8 audited = 0;
+	union tcp_flags tcp_flags __maybe_unused = { .value = 0 };
 
 	if (!revalidate_data(ctx, &data, &data_end, &ip6))
 		return DROP_INVALID;
@@ -1146,7 +1147,14 @@ ipv6_policy(struct __ctx_buff *ctx, int ifindex, __u32 src_label, __u8 *reason,
 	}
 
 #ifdef ENABLE_NODEPORT
-	if (ret == CT_NEW || ret == CT_REOPENED) {
+	if (tuple.nexthdr == IPPROTO_TCP) {
+		if (ctx_load_bytes(ctx, l4_off + 12, &tcp_flags, 2) < 0)
+			return DROP_CT_INVALID_HDR;
+	}
+	if (ret == CT_NEW || ret == CT_REOPENED ||
+	    /* See comment in ipv4_policy() */
+	    (ret == CT_ESTABLISHED && (tuple.nexthdr != IPPROTO_TCP ||
+	    ((tcp_flags.value & TCP_FLAG_SYN) && !(tcp_flags.value & TCP_FLAG_ACK))))) {
 		bool dsr = false;
 # ifdef ENABLE_DSR
 		int ret2;
@@ -1156,8 +1164,10 @@ ipv6_policy(struct __ctx_buff *ctx, int ifindex, __u32 src_label, __u8 *reason,
 			return ret2;
 
 		ct_state_new.dsr = dsr;
-		if (ret == CT_REOPENED && ct_state.dsr != dsr)
+		if ((ret == CT_REOPENED || ret == CT_ESTABLISHED) && ct_state.dsr != dsr) {
 			ct_update6_dsr(get_ct_map6(&tuple), &tuple, dsr);
+			ct_update_nodeport(get_ct_map6(&tuple), &tuple, !dsr);
+		}
 # endif /* ENABLE_DSR */
 		if (!dsr) {
 			bool node_port =
@@ -1355,6 +1365,7 @@ ipv4_policy(struct __ctx_buff *ctx, int ifindex, __u32 src_label, __u8 *reason,
 	__be32 orig_sip;
 	__u8 policy_match_type = POLICY_MATCH_NONE;
 	__u8 audited = 0;
+	union tcp_flags tcp_flags __maybe_unused = { .value = 0 };
 
 	if (!revalidate_data(ctx, &data, &data_end, &ip4))
 		return DROP_INVALID;
@@ -1462,7 +1473,16 @@ skip_policy_enforcement:
 #endif /* ENABLE_PER_PACKET_LB && !DISABLE_LOOPBACK_LB */
 
 #ifdef ENABLE_NODEPORT
-	if (ret == CT_NEW || ret == CT_REOPENED) {
+	if (tuple.nexthdr == IPPROTO_TCP && has_l4_header) {
+		if (ctx_load_bytes(ctx, l4_off + 12, &tcp_flags, 2) < 0)
+			return DROP_CT_INVALID_HDR;
+	}
+	if (ret == CT_NEW || ret == CT_REOPENED ||
+	    /* In case a DSR flow hits a stale nodeport ct entry, override it
+	     * so that a reply packet will be SNATed properly
+	     */
+	    (ret == CT_ESTABLISHED && ((tuple.nexthdr != IPPROTO_TCP || !has_l4_header) ||
+	    ((tcp_flags.value & TCP_FLAG_SYN) && !(tcp_flags.value & TCP_FLAG_ACK))))) {
 		bool dsr = false;
 # ifdef ENABLE_DSR
 		int ret2;
@@ -1472,8 +1492,10 @@ skip_policy_enforcement:
 			return ret2;
 
 		ct_state_new.dsr = dsr;
-		if (ret == CT_REOPENED && ct_state.dsr != dsr)
+		if ((ret == CT_REOPENED || ret == CT_ESTABLISHED) && ct_state.dsr != dsr) {
 			ct_update4_dsr(get_ct_map4(&tuple), &tuple, dsr);
+			ct_update_nodeport(get_ct_map4(&tuple), &tuple, !dsr);
+		}
 # endif /* ENABLE_DSR */
 		if (!dsr) {
 			bool node_port =
