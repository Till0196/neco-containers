diff --git a/bpf/Makefile b/bpf/Makefile
index b09f712c0e..28212a19f8 100644
--- a/bpf/Makefile
+++ b/bpf/Makefile
@@ -213,8 +213,10 @@ XDP_OPTIONS = $(LB_OPTIONS) \
 	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_SOCKET_LB_UDP:-DENABLE_SOCKET_LB_TCP:-DENABLE_NODEPORT:-DENABLE_DSR:-DENABLE_DSR_HYBRID: \
 	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DDSR_ENCAP_MODE:-DDSR_ENCAP_NONE:-DDSR_ENCAP_IPIP=2 \
 	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DDSR_ENCAP_MODE:-DDSR_ENCAP_IPIP:-DDSR_ENCAP_NONE=2 \
+	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DDSR_ENCAP_MODE:-DDSR_ENCAP_IPIP_CNI:-DDSR_ENCAP_NONE=2 \
 	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DENABLE_CAPTURE:-DDSR_ENCAP_MODE:-DDSR_ENCAP_NONE:-DDSR_ENCAP_IPIP=2 \
-	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DENABLE_CAPTURE:-DDSR_ENCAP_MODE:-DDSR_ENCAP_IPIP:-DDSR_ENCAP_NONE=2
+	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DENABLE_CAPTURE:-DDSR_ENCAP_MODE:-DDSR_ENCAP_IPIP:-DDSR_ENCAP_NONE=2 \
+	-DENABLE_NODEPORT_ACCELERATION:-DENABLE_IPV4:-DENABLE_IPV6:-DENABLE_NODEPORT:-DENABLE_DSR:-DENABLE_CAPTURE:-DDSR_ENCAP_MODE:-DDSR_ENCAP_IPIP_CNI:-DDSR_ENCAP_NONE=2
 
 ifndef MAX_XDP_OPTIONS
 MAX_XDP_OPTIONS = $(MAX_BASE_OPTIONS) -DENABLE_PREFILTER=1
diff --git a/bpf/complexity-tests/54/bpf_lxc.txt b/bpf/complexity-tests/54/bpf_lxc.txt
index 454e5cad46..2b4b7b3d82 100644
--- a/bpf/complexity-tests/54/bpf_lxc.txt
+++ b/bpf/complexity-tests/54/bpf_lxc.txt
@@ -1,3 +1,4 @@
 -DSKIP_DEBUG=1 -DENABLE_IPV4=1 -DENABLE_IPV6=1 -DENABLE_SOCKET_LB_TCP=1 -DENABLE_SOCKET_LB_UDP=1 -DENABLE_ROUTING=1 -DNO_REDIRECT=1 -DPOLICY_VERDICT_NOTIFY=1 -DALLOW_ICMP_FRAG_NEEDED=1 -DENABLE_IDENTITY_MARK=1 -DMONITOR_AGGREGATION=3 -DCT_REPORT_FLAGS=0x0002 -DENABLE_HOST_FIREWALL=1 -DENABLE_ICMP_RULE=1 -DENABLE_CUSTOM_CALLS=1 -DENABLE_SRV6=1 -DHAVE_LPM_TRIE_MAP_TYPE=1 -DHAVE_LRU_HASH_MAP_TYPE=1 -DENABLE_MASQUERADE=1 -DENABLE_SRC_RANGE_CHECK=1 -DENABLE_NODEPORT=1 -DENABLE_NODEPORT_ACCELERATION=1 -DENABLE_SESSION_AFFINITY=1 -DENABLE_DSR_ICMP_ERRORS=1 -DENABLE_DSR=1 -DENABLE_DSR_HYBRID=1 -DENABLE_IPV4_FRAGMENTS=1 -DENABLE_BANDWIDTH_MANAGER=1 -DENCAP_IFINDEX=1 -DTUNNEL_MODE=1 -DENABLE_EGRESS_GATEWAY=1 -DENABLE_VTEP=1
 -DSKIP_DEBUG=1 -DENABLE_IPV4=1 -DENABLE_SOCKET_LB_TCP=1 -DENABLE_SOCKET_LB_UDP=1 -DENABLE_ROUTING=1 -DNO_REDIRECT=1 -DPOLICY_VERDICT_NOTIFY=1 -DALLOW_ICMP_FRAG_NEEDED=1 -DENABLE_IDENTITY_MARK=1 -DMONITOR_AGGREGATION=3 -DCT_REPORT_FLAGS=0x0002 -DENABLE_HOST_FIREWALL=1 -DENABLE_ICMP_RULE=1 -DENABLE_CUSTOM_CALLS=1 -DENABLE_SRV6=1 -DHAVE_LPM_TRIE_MAP_TYPE=1 -DHAVE_LRU_HASH_MAP_TYPE=1 -DENABLE_MASQUERADE=1 -DENABLE_SRC_RANGE_CHECK=1 -DENABLE_NODEPORT=1 -DENABLE_NODEPORT_ACCELERATION=1 -DENABLE_SESSION_AFFINITY=1 -DENABLE_DSR_ICMP_ERRORS=1 -DENABLE_DSR=1 -DENABLE_DSR_HYBRID=1 -DENABLE_IPV4_FRAGMENTS=1 -DENABLE_BANDWIDTH_MANAGER=1 -DENCAP_IFINDEX=1 -DTUNNEL_MODE=1 -DENABLE_EGRESS_GATEWAY=1 -DENABLE_VTEP=1
 -DSKIP_DEBUG=1 -DENABLE_IPV6=1 -DENABLE_SOCKET_LB_TCP=1 -DENABLE_SOCKET_LB_UDP=1 -DENABLE_ROUTING=1 -DNO_REDIRECT=1 -DPOLICY_VERDICT_NOTIFY=1 -DALLOW_ICMP_FRAG_NEEDED=1 -DENABLE_IDENTITY_MARK=1 -DMONITOR_AGGREGATION=3 -DCT_REPORT_FLAGS=0x0002 -DENABLE_HOST_FIREWALL=1 -DENABLE_ICMP_RULE=1 -DENABLE_CUSTOM_CALLS=1 -DENABLE_SRV6=1 -DHAVE_LPM_TRIE_MAP_TYPE=1 -DHAVE_LRU_HASH_MAP_TYPE=1 -DENABLE_MASQUERADE=1 -DENABLE_SRC_RANGE_CHECK=1 -DENABLE_NODEPORT=1 -DENABLE_NODEPORT_ACCELERATION=1 -DENABLE_SESSION_AFFINITY=1 -DENABLE_DSR_ICMP_ERRORS=1 -DENABLE_DSR=1 -DENABLE_DSR_HYBRID=1 -DENABLE_IPV4_FRAGMENTS=1 -DENABLE_BANDWIDTH_MANAGER=1 -DENCAP_IFINDEX=1 -DTUNNEL_MODE=1 -DENABLE_EGRESS_GATEWAY=1 -DENABLE_VTEP=1
+-DSKIP_DEBUG=1 -DENABLE_IPV6=1 -DENABLE_HOST_SERVICES_TCP=1 -DENABLE_HOST_SERVICES_UDP=1 -DENABLE_HOST_REDIRECT=1 -DENABLE_ROUTING=1 -DNO_REDIRECT=1 -DPOLICY_VERDICT_NOTIFY=1 -DALLOW_ICMP_FRAG_NEEDED=1 -DENABLE_IDENTITY_MARK=1 -DMONITOR_AGGREGATION=3 -DCT_REPORT_FLAGS=0x0002 -DENABLE_HOST_FIREWALL=1 -DENABLE_ICMP_RULE=1 -DENABLE_CUSTOM_CALLS=1 -DHAVE_LPM_TRIE_MAP_TYPE=1 -DHAVE_LRU_HASH_MAP_TYPE=1 -DENABLE_MASQUERADE=1 -DENABLE_SRC_RANGE_CHECK=1 -DENABLE_NODEPORT=1 -DENABLE_NODEPORT_ACCELERATION=1 -DENABLE_SESSION_AFFINITY=1 -DENABLE_DSR_ICMP_ERRORS=1 -DENABLE_DSR=1 -DENABLE_IPV4_FRAGMENTS=1 -DENABLE_BANDWIDTH_MANAGER=1 -DENCAP_IFINDEX=1 -DTUNNEL_MODE=1 -DENABLE_EGRESS_GATEWAY=1 -DENABLE_VTEP=1 -DDSR_ENCAP_IPIP_CNI=1
diff --git a/bpf/lib/common.h b/bpf/lib/common.h
index 850fd57092..07495656cf 100644
--- a/bpf/lib/common.h
+++ b/bpf/lib/common.h
@@ -605,9 +605,11 @@ enum {
 	CB_POLICY,
 #define	CB_ADDR_V6_2		CB_POLICY	/* Alias, non-overlapping */
 #define	CB_BACKEND_ID		CB_POLICY	/* Alias, non-overlapping */
+#define CB_SRC_PORT			CB_POLICY	/* Alias, non-overlapping */
 	CB_NAT,
 #define	CB_ADDR_V6_3		CB_NAT		/* Alias, non-overlapping */
 #define	CB_FROM_HOST		CB_NAT		/* Alias, non-overlapping */
+#define CB_ADDR_V4_2		CB_NAT		/* Alias, non-overlapping */
 	CB_CT_STATE,
 #define	CB_ADDR_V6_4		CB_CT_STATE	/* Alias, non-overlapping */
 #define	CB_ENCRYPT_DST		CB_CT_STATE	/* Alias, non-overlapping,
diff --git a/bpf/lib/nodeport.h b/bpf/lib/nodeport.h
index de2c8983d5..376afc881c 100644
--- a/bpf/lib/nodeport.h
+++ b/bpf/lib/nodeport.h
@@ -497,6 +497,9 @@ int tail_nodeport_ipv6_dsr(struct __ctx_buff *ctx)
 #elif DSR_ENCAP_MODE == DSR_ENCAP_NONE
 	port = (__u16)ctx_load_meta(ctx, CB_PORT);
 	ret = dsr_set_ext6(ctx, ip6, &addr, port, &ohead);
+#elif DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+	/* To do, add support for ipv6 */
+	ret = 0;
 #else
 # error "Invalid load balancer DSR encapsulation mode!"
 #endif
@@ -730,7 +733,11 @@ static __always_inline int nodeport_lb6(struct __ctx_buff *ctx,
 
 	svc = lb6_lookup_service(&key, false);
 	if (svc) {
-		const bool skip_l3_xlate = DSR_ENCAP_MODE == DSR_ENCAP_IPIP;
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP
+		const bool skip_l3_xlate = true;
+#else
+		const bool skip_l3_xlate = false;
+#endif
 
 		if (!lb6_src_range_ok(svc, (union v6addr *)&ip6->saddr))
 			return DROP_NOT_IN_SRC_RANGE;
@@ -1078,7 +1085,7 @@ static __always_inline int nodeport_nat_ipv4_fwd(struct __ctx_buff *ctx)
 }
 
 #ifdef ENABLE_DSR
-#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP || DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
 static __always_inline __be32 rss_gen_src4(__be32 client, __be32 l4_hint)
 {
 	const __u32 bits = 32 - IPV4_RSS_PREFIX_BITS;
@@ -1088,6 +1095,154 @@ static __always_inline __be32 rss_gen_src4(__be32 client, __be32 l4_hint)
 		src |= bpf_htonl(hash_32(client ^ l4_hint, bits));
 	return src;
 }
+#endif /*DSR_ENCAP_MODE */
+
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+/*
+ * Original packet: [clientIP:clientPort -> serviceIP:servicePort] } IP/L4
+ *
+ * After DSR IPIP:  [rssSrcIP -> backendIP]                        } IP
+ *                  [clientIP:clientPort -> backendIP:backendPort] } IP/L4
+ */
+static __always_inline int dsr_set_ipipcni4(struct __ctx_buff *ctx,
+					    const struct iphdr *ip4,
+					    __be32 backend_addr,
+					    __be32 l4_hint,
+					    __be32 svc_port,
+					    __be32 svc_addr,
+					    __be16 *ohead)
+{
+	__u16 tot_len = bpf_ntohs(ip4->tot_len) + sizeof(*ip4);
+	const int l3_off = ETH_HLEN;
+	const int l4_off = ETH_HLEN + sizeof(struct iphdr);
+	__be16 id, frag_off;
+	__be32 sum, sum_old;
+	__u8 ihlver;
+
+	struct iphds {
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8	ihl:4,
+		version:4;
+#elif defined(__BIG_ENDIAN_BITFIELD)
+	__u8	version:4,
+		ihl:4;
+#else
+#error	"Please fix <asm/byteorder.h>"
+#endif
+	__u8	tos;
+	__be16	tot_len;
+	__be16	id;
+	__u8	ttl;
+	__u8	protocol;
+	__be32	saddr;
+	__be32	daddr;
+	__be32	opt0;
+	__be32	opt1;
+	};
+
+	struct iphds tp_old = {
+		.ihl		= ip4->ihl,
+		.version	= ip4->version,
+		.tot_len	= ip4->tot_len,
+		.ttl		= ip4->ttl,
+		.protocol	= ip4->protocol,
+		.saddr		= ip4->saddr,
+		.daddr		= ip4->daddr,
+		.opt0		= bpf_htonl(DSR_IPV4_OPT_32 | svc_port),
+		.opt1		= bpf_htonl(svc_addr),
+	}, tp_new = {
+		.ihl		= 5,
+		.version	= ip4->version,
+		.tot_len	= bpf_htons(tot_len),
+		.ttl		= IPDEFTTL,
+		.protocol	= IPPROTO_IPIP,
+		.saddr		= rss_gen_src4(ip4->saddr, l4_hint),
+		.daddr		= backend_addr,
+		.opt0		= 0x0,
+		.opt1		= 0x0,
+	};
+
+	if (ip4->protocol == IPPROTO_TCP) {
+		union tcp_flags tcp_flags = { .value = 0 };
+
+		if (ctx_load_bytes(ctx, ETH_HLEN + ip4->ihl * 4 + 12,
+				   &tcp_flags, 2) < 0)
+			return DROP_CT_INVALID_HDR;
+
+		/* Encap with IP-in-IP is required only for the first packet
+		 * (SYN), in the case of TCP, as for further packets of the
+		 * same connection a remote node will use a NAT entry to
+		 * reverse xlate a reply.
+		 */
+		if (!(tcp_flags.value & (TCP_FLAG_SYN)))
+			return 0;
+	}
+
+	if (dsr_is_too_big(ctx, tot_len)) {
+		*ohead = sizeof(*ip4);
+		return DROP_FRAG_NEEDED;
+	}
+
+	if (ip4->ihl == 0x5) {
+		tp_old.opt0 = 0;
+		tp_old.opt1 = 0;
+	}
+
+	if (ctx_adjust_hroom(ctx, sizeof(*ip4), BPF_ADJ_ROOM_NET,
+			     ctx_adjust_hroom_dsr_flags()))
+		return DROP_INVALID;
+
+	sum = csum_diff(&tp_old, 24, &tp_new, 24, 0);
+	if (ctx_load_bytes(ctx, l3_off + offsetof(struct iphdr, check), &sum_old, 2) < 0)
+		return DROP_CT_INVALID_HDR;
+	if (ctx_load_bytes(ctx, l3_off + offsetof(struct iphdr, id), &id, 2) < 0)
+		return DROP_CT_INVALID_HDR;
+	if (ctx_load_bytes(ctx, l3_off + offsetof(struct iphdr, frag_off), &frag_off, 2) < 0)
+		return DROP_CT_INVALID_HDR;
+
+	ihlver = *((__u8 *)&tp_new);
+	if (ctx_store_bytes(ctx, l3_off,
+			    &ihlver, 1, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l3_off + offsetof(struct iphdr, tot_len),
+			    &tp_new.tot_len, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l3_off + offsetof(struct iphdr, ttl),
+			    &tp_new.ttl, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l3_off + offsetof(struct iphdr, saddr),
+			    &tp_new.saddr, 8, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (l3_csum_replace(ctx, l3_off + offsetof(struct iphdr, check),
+			    0, sum, 0) < 0)
+		return DROP_CSUM_L3;
+
+	ihlver = *((__u8 *)&tp_old);
+	if (ctx_store_bytes(ctx, l4_off,
+			    &ihlver, 1, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, tot_len),
+			    &tp_old.tot_len, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, id),
+			    &id, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, frag_off),
+			    &frag_off, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, ttl),
+			    &tp_old.ttl, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, saddr),
+			    &tp_old.saddr, 8, 0) < 0)
+		return DROP_WRITE_ERROR;
+	if (ctx_store_bytes(ctx, l4_off + offsetof(struct iphdr, check),
+			    &sum_old, 2, 0) < 0)
+		return DROP_WRITE_ERROR;
+	return 0;
+}
+
+#elif DSR_ENCAP_MODE == DSR_ENCAP_IPIP
 
 /*
  * Original packet: [clientIP:clientPort -> serviceIP:servicePort] } IP/L4
@@ -1148,7 +1303,9 @@ static __always_inline int dsr_set_ipip4(struct __ctx_buff *ctx,
 		return DROP_CSUM_L3;
 	return 0;
 }
-#elif DSR_ENCAP_MODE == DSR_ENCAP_NONE
+#endif /* DSR_ENCAP_MODE */
+
+#if DSR_ENCAP_MODE == DSR_ENCAP_NONE || DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
 static __always_inline int dsr_set_opt4(struct __ctx_buff *ctx,
 					struct iphdr *ip4, __be32 svc_addr,
 					__be32 svc_port, __be16 *ohead)
@@ -1245,6 +1402,30 @@ static __always_inline int handle_dsr_v4(struct __ctx_buff *ctx, bool *dsr)
 	return 0;
 }
 
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+static __always_inline int decap_ipip_v4(struct __ctx_buff *ctx)
+{
+	void *data, *data_end;
+	struct iphdr *ip4;
+
+	if (!revalidate_data(ctx, &data, &data_end, &ip4))
+		return DROP_INVALID;
+
+	if (ip4->protocol == IPPROTO_IPIP) {
+		if (ip4->ihl != 0x5)
+			return DROP_INVALID;
+
+		/* This will remove outer iph. Fix me: Not working with XDP */
+		if (ctx_adjust_hroom(ctx, -(ip4->ihl * 4),
+						     BPF_ADJ_ROOM_MAC,
+						     ctx_adjust_hroom_dsr_flags()) < 0) {
+			return DROP_INVALID;
+		}
+	}
+	return 0;
+}
+#endif /* DSR_ENCAP_MODE */
+
 static __always_inline int xlate_dsr_v4(struct __ctx_buff *ctx,
 					const struct ipv4_ct_tuple *tuple,
 					int l4_off, bool has_l4_header)
@@ -1368,7 +1549,28 @@ int tail_nodeport_ipv4_dsr(struct __ctx_buff *ctx)
 		goto drop_err;
 	}
 
-#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+	ret = dsr_set_opt4(ctx, ip4,
+			   ctx_load_meta(ctx, CB_ADDR_V4_2),
+			   ctx_load_meta(ctx, CB_SRC_PORT), &ohead);
+	if (unlikely(ret)) {
+		if (dsr_fail_needs_reply(ret))
+			return dsr_reply_icmp4(ctx, ip4, ret, ohead);
+		goto drop_err;
+	}
+
+	if (!revalidate_data(ctx, &data, &data_end, &ip4)) {
+		ret = DROP_INVALID;
+		goto drop_err;
+	}
+
+	ret = dsr_set_ipipcni4(ctx, ip4,
+			       ctx_load_meta(ctx, CB_ADDR_V4),
+			       ctx_load_meta(ctx, CB_HINT),
+			       ctx_load_meta(ctx, CB_SRC_PORT),
+			       ctx_load_meta(ctx, CB_ADDR_V4_2),
+			       &ohead);
+#elif DSR_ENCAP_MODE == DSR_ENCAP_IPIP
 	ret = dsr_set_ipip4(ctx, ip4,
 			    ctx_load_meta(ctx, CB_ADDR_V4),
 			    ctx_load_meta(ctx, CB_HINT), &ohead);
@@ -1587,6 +1789,12 @@ static __always_inline int nodeport_lb4(struct __ctx_buff *ctx,
 
 	cilium_capture_in(ctx);
 
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+	ret = decap_ipip_v4(ctx);
+	if (ret != 0)
+		return ret;
+#endif /* DSR_ENCAP_MODE */
+
 	if (!revalidate_data(ctx, &data, &data_end, &ip4))
 		return DROP_INVALID;
 
@@ -1608,7 +1816,11 @@ static __always_inline int nodeport_lb4(struct __ctx_buff *ctx,
 
 	svc = lb4_lookup_service(&key, false);
 	if (svc) {
-		const bool skip_l3_xlate = DSR_ENCAP_MODE == DSR_ENCAP_IPIP;
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP
+		const bool skip_l3_xlate = true;
+#else
+		const bool skip_l3_xlate = false;
+#endif
 
 		if (!lb4_src_range_ok(svc, ip4->saddr))
 			return DROP_NOT_IN_SRC_RANGE;
@@ -1721,7 +1933,13 @@ redo:
 	if (!backend_local) {
 		edt_set_aggregate(ctx, 0);
 		if (nodeport_uses_dsr4(&tuple)) {
-#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP
+#if DSR_ENCAP_MODE == DSR_ENCAP_IPIP_CNI
+			ctx_store_meta(ctx, CB_HINT,
+				       ((__u32)tuple.sport << 16) | tuple.dport);
+			ctx_store_meta(ctx, CB_ADDR_V4, tuple.daddr);
+			ctx_store_meta(ctx, CB_ADDR_V4_2, key.address);
+			ctx_store_meta(ctx, CB_SRC_PORT, key.dport);
+#elif DSR_ENCAP_MODE == DSR_ENCAP_IPIP
 			ctx_store_meta(ctx, CB_HINT,
 				       ((__u32)tuple.sport << 16) | tuple.dport);
 			ctx_store_meta(ctx, CB_ADDR_V4, tuple.daddr);
diff --git a/bpf/lib/stubs.h b/bpf/lib/stubs.h
index 205bc0461c..a43eb8a894 100644
--- a/bpf/lib/stubs.h
+++ b/bpf/lib/stubs.h
@@ -12,6 +12,7 @@
 # ifndef DSR_ENCAP_MODE
 #  define DSR_ENCAP_MODE 0
 #  define DSR_ENCAP_IPIP 2
+# define DSR_ENCAP_IPIP_CNI 3
 # endif
 # if defined(ENABLE_IPV4) && defined(ENABLE_MASQUERADE) && !defined(IPV4_MASQUERADE)
 #  define IPV4_MASQUERADE 0
diff --git a/daemon/cmd/daemon_main.go b/daemon/cmd/daemon_main.go
index 8948ece323..1d28425c69 100644
--- a/daemon/cmd/daemon_main.go
+++ b/daemon/cmd/daemon_main.go
@@ -636,7 +636,7 @@ func initializeFlags() {
 	flags.String(option.LoadBalancerAlg, option.NodePortAlgRandom, "BPF load balancing algorithm (\"random\", \"maglev\")")
 	option.BindEnv(option.LoadBalancerAlg)
 
-	flags.String(option.LoadBalancerDSRDispatch, option.DSRDispatchOption, "BPF load balancing DSR dispatch method (\"opt\", \"ipip\")")
+	flags.String(option.LoadBalancerDSRDispatch, option.DSRDispatchOption, "BPF load balancing DSR dispatch method (\"opt\", \"ipip\", \"ipipcni\")")
 	option.BindEnv(option.LoadBalancerDSRDispatch)
 
 	flags.String(option.LoadBalancerDSRL4Xlate, option.DSRL4XlateFrontend, "BPF load balancing DSR L4 DNAT method for IPIP (\"frontend\", \"backend\")")
diff --git a/daemon/cmd/kube_proxy_replacement.go b/daemon/cmd/kube_proxy_replacement.go
index 9f0fbc0ef8..f2d427e425 100644
--- a/daemon/cmd/kube_proxy_replacement.go
+++ b/daemon/cmd/kube_proxy_replacement.go
@@ -117,7 +117,8 @@ func initKubeProxyReplacementOptions() (bool, error) {
 
 		if option.Config.NodePortMode == option.NodePortModeDSR &&
 			option.Config.LoadBalancerDSRDispatch != option.DSRDispatchOption &&
-			option.Config.LoadBalancerDSRDispatch != option.DSRDispatchIPIP ||
+			option.Config.LoadBalancerDSRDispatch != option.DSRDispatchIPIP &&
+			option.Config.LoadBalancerDSRDispatch != option.DSRDispatchIPIPCNI ||
 			option.Config.NodePortMode == option.NodePortModeHybrid &&
 				option.Config.LoadBalancerDSRDispatch != option.DSRDispatchOption {
 			return false, fmt.Errorf("Invalid value for --%s: %s", option.LoadBalancerDSRDispatch, option.Config.LoadBalancerDSRDispatch)
diff --git a/install/kubernetes/cilium/templates/cilium-configmap.yaml b/install/kubernetes/cilium/templates/cilium-configmap.yaml
index f9b49dc580..dccef7dd10 100644
--- a/install/kubernetes/cilium/templates/cilium-configmap.yaml
+++ b/install/kubernetes/cilium/templates/cilium-configmap.yaml
@@ -621,6 +621,9 @@ data:
 {{- if hasKey .Values.loadBalancer "acceleration" }}
   bpf-lb-acceleration: {{ .Values.loadBalancer.acceleration | quote }}
 {{- end }}
+{{- if hasKey .Values.loadBalancer "dsrL4Translate" }}
+  bpf-lb-dsr-l4-xlate: {{ .Values.loadBalancer.dsrL4Translate | quote }}
+{{- end }}
 {{- if hasKey .Values.loadBalancer "dsrDispatch" }}
   bpf-lb-dsr-dispatch: {{ .Values.loadBalancer.dsrDispatch | quote }}
 {{- end }}
diff --git a/install/kubernetes/cilium/values.yaml b/install/kubernetes/cilium/values.yaml
index 05fc766ccd..e3d680259c 100644
--- a/install/kubernetes/cilium/values.yaml
+++ b/install/kubernetes/cilium/values.yaml
@@ -1304,6 +1304,10 @@ monitor:
   # used to pass a service IP and port to remote backend
   # dsrDispatch: opt
 
+  # -- dsrL4Translate configures whether use frontend or backend to
+  # translate service port
+  # dsrL4Translate: frontend
+
   # -- serviceTopology enables K8s Topology Aware Hints -based service
   # endpoints filtering
   # serviceTopology: false
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index ea542dd527..e377258228 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -317,6 +317,7 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 			dsrEncapInv = iota
 			dsrEncapNone
 			dsrEncapIPIP
+			dsrEncapIPIPCNI
 		)
 		const (
 			dsrL4XlateInv = iota
@@ -324,6 +325,7 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 			dsrL4XlateBackend
 		)
 		cDefinesMap["DSR_ENCAP_IPIP"] = fmt.Sprintf("%d", dsrEncapIPIP)
+		cDefinesMap["DSR_ENCAP_IPIP_CNI"] = fmt.Sprintf("%d", dsrEncapIPIPCNI)
 		cDefinesMap["DSR_ENCAP_NONE"] = fmt.Sprintf("%d", dsrEncapNone)
 		cDefinesMap["DSR_XLATE_FRONTEND"] = fmt.Sprintf("%d", dsrL4XlateFrontend)
 		cDefinesMap["DSR_XLATE_BACKEND"] = fmt.Sprintf("%d", dsrL4XlateBackend)
@@ -340,8 +342,11 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 				cDefinesMap["DSR_ENCAP_MODE"] = fmt.Sprintf("%d", dsrEncapNone)
 			} else if option.Config.LoadBalancerDSRDispatch == option.DSRDispatchIPIP {
 				cDefinesMap["DSR_ENCAP_MODE"] = fmt.Sprintf("%d", dsrEncapIPIP)
+			} else if option.Config.LoadBalancerDSRDispatch == option.DSRDispatchIPIPCNI {
+				cDefinesMap["DSR_ENCAP_MODE"] = fmt.Sprintf("%d", dsrEncapIPIPCNI)
 			}
-			if option.Config.LoadBalancerDSRDispatch == option.DSRDispatchIPIP {
+			if option.Config.LoadBalancerDSRDispatch == option.DSRDispatchIPIP ||
+				option.Config.LoadBalancerDSRDispatch == option.DSRDispatchIPIPCNI {
 				if option.Config.LoadBalancerDSRL4Xlate == option.DSRL4XlateFrontend {
 					cDefinesMap["DSR_XLATE_MODE"] = fmt.Sprintf("%d", dsrL4XlateFrontend)
 				} else if option.Config.LoadBalancerDSRL4Xlate == option.DSRL4XlateBackend {
diff --git a/pkg/option/config.go b/pkg/option/config.go
index 23c8c8b84c..d8b2f223c5 100644
--- a/pkg/option/config.go
+++ b/pkg/option/config.go
@@ -1189,6 +1189,9 @@ const (
 	// DSR dispatch mode to encapsulate to IPIP
 	DSRDispatchIPIP = "ipip"
 
+	// DSR dispatch mode to encapsulate to IPIP
+	DSRDispatchIPIPCNI = "ipipcni"
+
 	// DSR L4 translation to frontend port
 	DSRL4XlateFrontend = "frontend"
 
@@ -1850,7 +1853,7 @@ type DaemonConfig struct {
 	NodePortAlg string
 
 	// LoadBalancerDSRDispatch indicates the method for pushing packets to
-	// backends under DSR ("opt" or "ipip")
+	// backends under DSR ("opt", "ipip", or "ipipcni")
 	LoadBalancerDSRDispatch string
 
 	// LoadBalancerDSRL4Xlate indicates the method for L4 DNAT translation
diff --git a/test/k8s/services.go b/test/k8s/services.go
index 72b6a0b405..208ef29d04 100644
--- a/test/k8s/services.go
+++ b/test/k8s/services.go
@@ -685,6 +685,20 @@ Secondary Interface %s :: IPv4: (%s, %s), IPv6: (%s, %s)`,
 			testNodePortExternal(kubectl, ni, false, true, true)
 		})
 
+		It("Tests with XDP, direct routing, DSR in IPIP and Random", func() {
+			DeployCiliumOptionsAndDNS(kubectl, ciliumFilename, map[string]string{
+				"loadBalancer.acceleration":   "testing-only",
+				"loadBalancer.mode":           "dsr",
+				"loadBalancer.algorithm":      "random",
+				"tunnel":                      "disabled",
+				"autoDirectNodeRoutes":        "true",
+				"loadBalancer.dsrDispatch":    "ipipcni",
+				"loadBalancer.dsrL4Translate": "backend",
+				"devices":                     fmt.Sprintf(`'{%s}'`, ni.PrivateIface),
+			})
+			testNodePortExternal(kubectl, ni, false, true, true)
+		})
+
 		It("Tests with XDP, direct routing, DSR and Maglev", func() {
 			DeployCiliumOptionsAndDNS(kubectl, ciliumFilename, map[string]string{
 				"loadBalancer.acceleration": "testing-only",
